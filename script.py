# buffer = [
#     0x73, 0x00, 0x71, 0x00, 0x6C, 0xff, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00,
#     0x6C, 0x00, 0x65, 0xff, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x73, 0x00, 0x73, 0x00, 0x64, 0x00,
#     0xff, 0x64, 0x00, 0x62, 0x00, 0x73, 0x00, 0x6E, 0x00, 0x6D, 0x00, 0x70, 0xff, 0x00,
#     0x73, 0x00, 0x79, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00,
#     0xff, 0x61, 0x00, 0x67, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x76, 0x00, 0x63, 0x00,
#     0xff, 0x69, 0x00, 0x73, 0x00, 0x71, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x75, 0x00,
#     0x73, 0x00, 0x73, 0x00, 0x76, 0x00, 0x63, 0xff, 0x00, 0x78, 0x00, 0x66, 0x00, 0x73, 0x00,
#     0x73, 0x00, 0x76, 0x00, 0x63, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0xff, 0x00, 0x6D, 0x00,
#     0x79, 0x00, 0x64, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00,
#     0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0xff, 0x00,
#     0x6F, 0x00, 0x63, 0x00, 0x61, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x70, 0x00,
#     0x64, 0x00, 0x73, 0xff, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x73, 0x00, 0x76, 0x00,
#     0x63, 0xff, 0x00, 0x66, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x66, 0x00, 0x6F, 0x00,
#     0x78, 0xff, 0x00, 0x74, 0x00, 0x62, 0x00, 0x69, 0x00, 0x72, 0x00, 0x64, 0x00, 0x63, 0x00,
#     0x6F, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x67, 0xff, 0x00, 0x6D, 0x00, 0x79, 0x00,
#     0x64, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x71, 0x00,
#     0x6F, 0x00, 0x73, 0xff, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00,
#     0xff, 0x64, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x35, 0x00, 0x30, 0x00,
#     0xff, 0x73, 0x00, 0x71, 0x00, 0x62, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00,
#     0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0xff, 0x00,
#     0x65, 0x00, 0x78, 0x00, 0x63, 0x00, 0x65, 0x00, 0x6C, 0xff, 0x00, 0x69, 0x00, 0x6E, 0x00,
#     0x66, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0xff, 0x00, 0x6D, 0x00,
#     0x73, 0x00, 0x61, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0xff, 0x00,
#     0x6D, 0x00, 0x73, 0x00, 0x70, 0x00, 0x75, 0x00, 0x62, 0xff, 0x00, 0x6F, 0x00, 0x6E, 0x00,
#     0x65, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0xff, 0x00, 0x6F, 0x00, 0x75, 0x00,
#     0x74, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0xff, 0x00, 0x70, 0x00, 0x6F, 0x00,
#     0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6E, 0x00, 0x74, 0xff, 0x00, 0x73, 0x00,
#     0x74, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6D, 0xff, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00,
#     0x62, 0x00, 0x61, 0x00, 0x74, 0xff, 0x00, 0x74, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6E, 0x00,
#     0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x62, 0x00, 0x69, 0x00, 0x72, 0x00, 0x64, 0xff, 0x00,
#     0x76, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0xff, 0x00, 0x77, 0x00, 0x69, 0x00,
#     0x6E, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x64, 0xff, 0x00, 0x77, 0x00, 0x6F, 0x00,
#     0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x61, 0x00, 0x64, 0xff, 0x00, 0x6E, 0x00, 0x6F, 0x00,
#     0x74, 0x00, 0x65, 0x00, 0x70, 0x00, 0x61, 0x00, 0x64, 0x00]

# buffer2 = [0x76, 0x00, 0x73, 0x00, 0x73, 0x00, 0xff, 0x73, 0x00, 0x71, 0x00, 0x6C, 0x00, 0xff,
#            0x73, 0x00, 0x76, 0x00, 0x63, 0x00, 0x24, 0x00, 0xff, 0x6D, 0x00, 0x65, 0x00, 0x6D, 0x00,
#            0x74, 0x00, 0x61, 0x00, 0x73, 0x00, 0xff, 0x6D, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00,
#            0x63, 0x00, 0x73, 0x00, 0xff, 0x6D, 0x00, 0x73, 0x00, 0x65, 0x00, 0x78, 0x00, 0x63, 0x00,
#            0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0xff, 0x73, 0x00, 0x6F, 0x00,
#            0x70, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x73, 0x00, 0xff, 0x76, 0x00, 0x65, 0x00, 0x65, 0x00,
#            0x61, 0x00, 0x6D, 0x00, 0xff, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x75, 0x00,
#            0x70, 0x00, 0xff, 0x47, 0x00, 0x78, 0x00, 0x56, 0x00, 0x73, 0x00, 0x73, 0x00, 0xff,
#            0x47, 0x00, 0x78, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x72, 0x00, 0xff, 0x47, 0x00, 0x78, 0x00,
#            0x46, 0x00, 0x57, 0x00, 0x44, 0x00, 0xff, 0x47, 0x00, 0x78, 0x00, 0x43, 0x00, 0x56, 0x00,
#            0x44, 0x00, 0xff, 0x47, 0x00, 0x78, 0x00, 0x43, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x67, 0x00,
#            0x72, 0x00]
# result = []
# temp_str = ''
# for i in range(len(buffer2)):
#     if buffer2[i] == 0xff:
#         result.append(temp_str)
#         temp_str = ''
#     elif buffer2[i] == 0:
#         continue
#     else:
#         temp_str += chr(buffer2[i])

# print(result)
# def ror(val, r_bits, max_bits): return \
#     ((val & (2**max_bits-1)) >> r_bits % max_bits) | \
#     (val << (max_bits-(r_bits % max_bits)) & (2**max_bits-1))


# def ror13add(input_str):
#     temp = [ord(each) for each in input_str]
#     result = 0
#     for i in range(len(temp)):
#         if temp[i] >= 0x41 and temp[i] <= 0x5A:
#             temp[i] |= 0x20
#         result = temp[i] + ror(result, 13, 32)
#     result = ror(result, 13, 32)
#     return result


# for first in range(0x41, 0x5b):
#     for second in range(0x41, 0x5b):
#         for third in range(0x41, 0x5b):
#             # for fourth in range(0x41, 0x5b):
#             # for fifth in range(0x41, 0x5b):
#             target = chr(first) + chr(second) + \
#                 chr(third)

#             if ror13add(target) == 0x35D31849:
#                 print(target.lower())

# print(ror13add('..') == 0xE3426CD7)
from aplib import decompress

buffer = [0x68, 0xE0, 0x65, 0xE0, 0x6C, 0xCE, 0x05, 0x6F, 0x0E, 0x2E, 0x0E, 0x74, 0x0D, 0x78, 0x09, 0xB0,
          0x02, 0x00]

decompressed = ''.join([chr(each)
                        for each in decompress(bytearray(buffer)) if each != 0x0])

print(decompressed)
